version: '3.8'

services:
  # Kafka với KRaft mode (không cần ZooKeeper)
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      
      # Cấu hình listeners
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      
      # Cấu hình cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      
      # Thư mục dữ liệu
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      
      # Chế độ clustering
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - ie212_pipeline
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Khởi tạo topic
  kafka-init:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Chờ Kafka khởi động...'
        sleep 5
        echo 'Tạo topic coin-data...'
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic coin-data --partitions 3 --replication-factor 1
        echo 'Topic coin-data đã được tạo.'
      "
    networks:
      - ie212_pipeline

  # UI để quản lý Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - ie212_pipeline

  # Cassandra setup database
  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=coinbase_cluster
      - CASSANDRA_KEYSPACE=coinbase
    volumes:
      - cassandra-data:/var/lib/cassandra
    networks:
      - ie212_pipeline
    healthcheck:
      test: ["CMD-SHELL", "nodetool status | grep -q '^UN'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Cassandra setup - tạo keyspace và table
  cassandra-setup:
    image: cassandra:latest
    container_name: cassandra-setup
    depends_on:
      cassandra:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Cassandra to be ready...'
        sleep 10
        echo 'Creating keyspace...'
        cqlsh cassandra -e \"CREATE KEYSPACE IF NOT EXISTS coinbase WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};\"
        echo 'Creating table...'
        cqlsh cassandra -e \"CREATE TABLE IF NOT EXISTS coinbase.prices (product_id TEXT, time TIMESTAMP, price DOUBLE, PRIMARY KEY (product_id, time));\"
        echo 'Cassandra setup complete!'
      "
    networks:
      - ie212_pipeline

  # S3 compatible storage (MinIO)
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - ie212_pipeline
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO setup
  minio-setup:
    image: minio/mc
    container_name: minio-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 5;
        /usr/bin/mc config host add minio http://minio:9000 minioadmin minioadmin;
        /usr/bin/mc mb --ignore-existing minio/ie212-coinbase-data;
        exit 0;
      "
    networks:
      - ie212_pipeline

  # Python Producer
  coinbase-producer:
    build:
      context: .
      dockerfile: ./coinbase_kafka_producer/producer.Dockerfile
    container_name: coinbase-producer
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - ie212_pipeline
    restart: unless-stopped

  # Go Consumer
  coinbase-consumer:
    build:
      context: .
      dockerfile: ./go_kafka_consumer/consumer.Dockerfile
    container_name: coinbase-consumer
    depends_on:
      - kafka
      - minio
      - kafka-init
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      # AWS_ENDPOINT: http://minio:9000 # Uncomment if using MinIO
      AWS_REGION: ${AWS_REGION} # ap-southeast-1 if using MinIO
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID} # minioadmin if using MinIO
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY} # minioadmin if using MinIO
      # AWS_S3_FORCE_PATH_STYLE: "true" # Uncomment if using MinIO
      AWS_S3_BUCKET: ${S3_BUCKET} # Comment this line if using MinIO
    networks:
      - ie212_pipeline
    restart: unless-stopped

  # Spark Processor
  spark-processor:
    build:
      context: .
      dockerfile: ./kafka_spark_processor/processor.Dockerfile
    container_name: spark-processor
    depends_on:
      - kafka
      - cassandra
      - cassandra-setup
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 29092
      CASSANDRA_HOST: cassandra
      CASSANDRA_PORT: 9042
    networks:
      - ie212_pipeline
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    # environment:
    #   GF_INSTALL_PLUGINS: grafana-cassandra-datasource
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - ie212_pipeline
    depends_on:
      - cassandra

volumes:
  kafka-data:
  cassandra-data:
  minio-data:
  grafana-data:

networks:
  ie212_pipeline:
    driver: bridge